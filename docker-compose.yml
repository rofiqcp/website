version: '3.8'

services:
  scada-app:
    build: .
    container_name: scada-esp32-control
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - ESP32_IP=${ESP32_IP:-192.168.1.100}
      - ESP32_PORT=${ESP32_PORT:-80}
      - ESP32_TIMEOUT=${ESP32_TIMEOUT:-5000}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:5000}
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - scada-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/info', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: scada-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - scada-app
    restart: unless-stopped
    networks:
      - scada-network

  # Optional: MongoDB for data logging
  mongodb:
    image: mongo:5.0
    container_name: scada-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=scada
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - scada-network

  # Optional: Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: scada-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - scada-network

volumes:
  mongodb_data:
  redis_data:

networks:
  scada-network:
    driver: bridge
